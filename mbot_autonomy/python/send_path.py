import time
import lcm
import sys
from mbot_lcm_msgs.twist2D_t import twist2D_t
from mbot_lcm_msgs.pose2D_t import pose2D_t
from mbot_lcm_msgs.path2D_t import path2D_t

# The waypoints (x, y, theta) in the global frame
# drive_path = [
#     (0.61, 0, 0),
#     (0.61, -0.61, 0),
#     (2*0.61, -0.61, 0),
#     (2*0.61, 0.61, 0),
#     (3*0.61, 0.61, 0),
#     (3*0.61, -0.61, 0),
#     (4*0.61, -0.61, 0),
#     (4*0.61, 0, 0),
#     (5*0.61, 0, 0)
# ]
drive_path = [
    [0.00, 0.00, 0.00],
    [0.61, 0.00, 0.00],
    [0.61, 0.61, 0.00],
    [1.22, 0.61, 0.00],
    [1.22, 0.00, 0.00],
    [1.83, 0.00, 0.00],
    [1.83, 1.22, 0.00],
    [0.00, 1.22, 0.00],
    [0.00, 0.00, 0.00],
    [0.61, 0.00, 0.00],
    [0.61, 0.61, 0.00],
    [1.22, 0.61, 0.00],
    [1.22, 0.00, 0.00],
    [1.83, 0.00, 0.00],
    [1.83, 1.22, 0.00],
    [0.00, 1.22, 0.00],
    [0.00, 0.00, 0.00]
]
drive_path = [
    [0.00, 0.00, 0.00],
    [0.30, 0.00, 0.00],
    [0.30, 0.00, 0.00],
    [0.37, 0.01, 0.00],
    [0.44, 0.03, 0.00],
    [0.49, 0.07, 0.00],
    [0.54, 0.11, 0.00],
    [0.58, 0.17, 0.00],
    [0.60, 0.24, 0.00],
    [0.61, 0.30, 0.00],
    [0.61, 0.30, 0.00],
    [0.62, 0.37, 0.00],
    [0.64, 0.44, 0.00],
    [0.68, 0.49, 0.00],
    [0.72, 0.54, 0.00],
    [0.78, 0.58, 0.00],
    [0.85, 0.60, 0.00],
    [0.91, 0.61, 0.00],
    [0.98, 0.60, 0.00],
    [1.05, 0.58, 0.00],
    [1.10, 0.54, 0.00],
    [1.15, 0.49, 0.00],
    [1.19, 0.44, 0.00],
    [1.21, 0.37, 0.00],
    [1.22, 0.30, 0.00],
    [1.22, 0.30, 0.00],
    [1.23, 0.24, 0.00],
    [1.25, 0.17, 0.00],
    [1.28, 0.11, 0.00],
    [1.33, 0.07, 0.00],
    [1.39, 0.03, 0.00],
    [1.46, 0.01, 0.00],
    [1.52, 0.00, 0.00],
    [1.83, 0.00, 0.00],
    [1.83, 0.91, 0.00],
    [1.83, 0.91, 0.00],
    [1.82, 0.98, 0.00],
    [1.80, 1.05, 0.00],
    [1.76, 1.10, 0.00],
    [1.71, 1.15, 0.00],
    [1.66, 1.19, 0.00],
    [1.59, 1.21, 0.00],
    [1.52, 1.22, 0.00],
    [0.30, 1.22, 0.00],
    [0.30, 1.22, 0.00],
    [0.24, 1.21, 0.00],
    [0.17, 1.19, 0.00],
    [0.11, 1.15, 0.00],
    [0.07, 1.10, 0.00],
    [0.03, 1.05, 0.00],
    [0.01, 0.98, 0.00],
    [0.00, 0.91, 0.00],
    [0.00, 0.00, 0.00],
    [0.30, 0.00, 0.00],
    [0.30, 0.00, 0.00],
    [0.37, 0.01, 0.00],
    [0.44, 0.03, 0.00],
    [0.49, 0.07, 0.00],
    [0.54, 0.11, 0.00],
    [0.58, 0.17, 0.00],
    [0.60, 0.24, 0.00],
    [0.61, 0.30, 0.00],
    [0.61, 0.30, 0.00],
    [0.62, 0.37, 0.00],
    [0.64, 0.44, 0.00],
    [0.68, 0.49, 0.00],
    [0.72, 0.54, 0.00],
    [0.78, 0.58, 0.00],
    [0.85, 0.60, 0.00],
    [0.91, 0.61, 0.00],
    [0.98, 0.60, 0.00],
    [1.05, 0.58, 0.00],
    [1.10, 0.54, 0.00],
    [1.15, 0.49, 0.00],
    [1.19, 0.44, 0.00],
    [1.21, 0.37, 0.00],
    [1.22, 0.30, 0.00],
    [1.22, 0.30, 0.00],
    [1.23, 0.24, 0.00],
    [1.25, 0.17, 0.00],
    [1.28, 0.11, 0.00],
    [1.33, 0.07, 0.00],
    [1.39, 0.03, 0.00],
    [1.46, 0.01, 0.00],
    [1.52, 0.00, 0.00],
    [1.83, 0.00, 0.00],
    [1.83, 0.91, 0.00],
    [1.83, 0.91, 0.00],
    [1.82, 0.98, 0.00],
    [1.80, 1.05, 0.00],
    [1.76, 1.10, 0.00],
    [1.71, 1.15, 0.00],
    [1.66, 1.19, 0.00],
    [1.59, 1.21, 0.00],
    [1.52, 1.22, 0.00],
    [0.30, 1.22, 0.00],
    [0.30, 1.22, 0.00],
    [0.24, 1.21, 0.00],
    [0.17, 1.19, 0.00],
    [0.11, 1.15, 0.00],
    [0.07, 1.10, 0.00],
    [0.03, 1.05, 0.00],
    [0.01, 0.98, 0.00],
    [0.00, 0.91, 0.00],
    [0.00, 0.00, 0.00],
    [0.00, 0.00, 0.00]
]

lc = lcm.LCM("udpm://239.255.76.67:7667?ttl=0")

# Reset the Odometry to 0
init_odometry = pose2D_t()
init_odometry.x = 0
init_odometry.y = 0
init_odometry.theta = 0

lc.publish("MBOT_ODOMETRY_RESET", init_odometry.encode())

# Set the max speed
vel_limits = twist2D_t()
vel_limits.vx = 0.8
vel_limits.wz = 3.14

lc.publish("MBOT_MAX_VEL", vel_limits.encode())

# Get the path command
command = path2D_t()
command.path = []

# Build up path
for x, y, theta in drive_path:
    pose = pose2D_t()
    pose.x = x
    pose.y = y
    pose.theta = theta
    
    command.path.append(pose)

command.path_length = len(command.path)

# Send mbot velocity command
lc.publish("CONTROLLER_PATH", command.encode())